{
  "version": 3,
  "sources": ["../src/uv.sw.js"],
  "sourcesContent": ["/*globals __uv$config*/\n// Users must import the config (and bundle) prior to importing uv.sw.js\n// This is to allow us to produce a generic bundle with no hard-coded paths.\n\n/**\n * @type {import('../uv').UltravioletCtor}\n */\nconst Ultraviolet = self.Ultraviolet;\n\nfunction createContext(html) {\n    let modifiedHTML = html;\n\n    function injectAtPosition(content, position) {\n        return modifiedHTML.slice(0, position) + content + modifiedHTML.slice(position);\n    }\n\n    return {\n        injectHead: (content) => {\n            const headCloseIndex = modifiedHTML.indexOf('</head>');\n            if (headCloseIndex !== -1) {\n                modifiedHTML = injectAtPosition(content, headCloseIndex);\n            }\n        },\n        injectCSS: (content) => {\n            const styleTag = `<style>${content}</style>`;\n            const headCloseIndex = modifiedHTML.indexOf('</head>');\n            if (headCloseIndex !== -1) {\n                modifiedHTML = injectAtPosition(styleTag, headCloseIndex);\n            }\n        },\n        injectJS: (content) => {\n            const scriptTag = `<script>${content}</script>`;\n            const bodyCloseIndex = modifiedHTML.indexOf('</body>');\n            if (bodyCloseIndex !== -1) {\n                modifiedHTML = injectAtPosition(scriptTag, bodyCloseIndex);\n            } else {\n                modifiedHTML += scriptTag;\n            }\n        },\n\n        getModifiedHtml: () => modifiedHTML\n    };\n}\n\nconst cspHeaders = [\n    'cross-origin-embedder-policy',\n    'cross-origin-opener-policy',\n    'cross-origin-resource-policy',\n    'content-security-policy',\n    'content-security-policy-report-only',\n    'expect-ct',\n    'feature-policy',\n    'origin-isolation',\n    'strict-transport-security',\n    'upgrade-insecure-requests',\n    'x-content-type-options',\n    'x-download-options',\n    'x-frame-options',\n    'x-permitted-cross-domain-policies',\n    'x-powered-by',\n    'x-xss-protection',\n];\nconst emptyMethods = ['GET', 'HEAD'];\n\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\n    constructor(config = __uv$config) {\n        super();\n        if (!config.prefix) config.prefix = '/service/';\n        this.config = config;\n        /**\n         * @type {InstanceType<Ultraviolet['BareClient']>}\n         */\n        this.bareClient = new Ultraviolet.BareClient();\n    }\n    /**\n     *\n     * @param {Event & {request: Request}} param0\n     * @returns\n     */\n    route({ request }) {\n        if (request.url.startsWith(location.origin + this.config.prefix)) return true;\n        else return false;\n    }\n    /**\n     *\n     * @param {Event & {request: Request}} param0\n     * @returns\n     */\n    async fetch({ request }) {\n        /**\n         * @type {string|void}\n         */\n        let fetchedURL;\n\n        try {\n            if (!request.url.startsWith(location.origin + this.config.prefix))\n                return await fetch(request);\n\n            const ultraviolet = new Ultraviolet(this.config);\n\n            if (typeof this.config.construct === 'function') {\n                this.config.construct(ultraviolet, 'service');\n            }\n\n            const db = await ultraviolet.cookie.db();\n\n            ultraviolet.meta.origin = location.origin;\n            ultraviolet.meta.base = ultraviolet.meta.url = new URL(\n                ultraviolet.sourceUrl(request.url)\n            );\n\n            const requestCtx = new RequestContext(\n                request,\n                ultraviolet,\n                !emptyMethods.includes(request.method.toUpperCase())\n                    ? await request.blob()\n                    : null\n            );\n\n            if (ultraviolet.meta.url.protocol === 'blob:') {\n                requestCtx.blob = true;\n                requestCtx.base = requestCtx.url = new URL(\n                    requestCtx.url.pathname\n                );\n            }\n\n            if (\n                request.referrer &&\n                request.referrer.startsWith(location.origin)\n            ) {\n                const referer = new URL(\n                    ultraviolet.sourceUrl(request.referrer)\n                );\n\n                if (\n                    requestCtx.headers.origin ||\n                    (ultraviolet.meta.url.origin !== referer.origin &&\n                        request.mode === 'cors')\n                ) {\n                    requestCtx.headers.origin = referer.origin;\n                }\n\n                requestCtx.headers.referer = referer.href;\n            }\n\n            const cookies = (await ultraviolet.cookie.getCookies(db)) || [];\n            const cookieStr = ultraviolet.cookie.serialize(\n                cookies,\n                ultraviolet.meta,\n                false\n            );\n\n            requestCtx.headers['user-agent'] = navigator.userAgent;\n\n            if (cookieStr) requestCtx.headers.cookie = cookieStr;\n\n            const reqEvent = new HookEvent(requestCtx, null, null);\n            this.emit('request', reqEvent);\n\n            if (reqEvent.intercepted) return reqEvent.returnValue;\n\n            fetchedURL = requestCtx.blob\n                ? 'blob:' + location.origin + requestCtx.url.pathname\n                : requestCtx.url;\n\n                if (typeof this.config.middleware === 'function') {\n                    const middlewareReq = new Request(fetchedURL, {\n                        headers: requestCtx.headers,\n                        method: requestCtx.method,\n                        body: requestCtx.body,\n                        credentials: requestCtx.credentials,\n                        mode: requestCtx.mode,\n                        cache: requestCtx.cache,\n                        redirect: requestCtx.redirect,\n                    });\n                \n                    const middleware = await this.config.middleware(middlewareReq);\n                \n                    if (middleware instanceof Response) {\n                        return middleware;\n                    } else if (middleware instanceof Request) {\n                        // Update the request context with the modified request\n                        fetchedURL = middleware.url;\n                        requestCtx.headers = Object.fromEntries(middleware.headers.entries());\n                        requestCtx.method = middleware.method;\n                        requestCtx.body = middleware.body;\n                        requestCtx.credentials = middleware.credentials;\n                        requestCtx.mode = middleware.mode;\n                        requestCtx.cache = middleware.cache;\n                        requestCtx.redirect = middleware.redirect;\n                    }\n                }\n\n            const response = await this.bareClient.fetch(fetchedURL, {\n                headers: requestCtx.headers,\n                method: requestCtx.method,\n                body: requestCtx.body,\n                credentials: requestCtx.credentials,\n                mode: requestCtx.mode,\n                cache: requestCtx.cache,\n                redirect: requestCtx.redirect,\n            });\n\n            const responseCtx = new ResponseContext(requestCtx, response);\n            const resEvent = new HookEvent(responseCtx, null, null);\n\n            this.emit('beforemod', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            for (const name of cspHeaders) {\n                if (responseCtx.headers[name]) delete responseCtx.headers[name];\n            }\n\n            if (responseCtx.headers.location) {\n                responseCtx.headers.location = ultraviolet.rewriteUrl(\n                    responseCtx.headers.location\n                );\n            }\n\n            // downloads\n            if (request.destination === 'document') {\n                const header = responseCtx.headers['content-disposition'];\n\n                // validate header and test for filename\n                if (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\n                    // if filename= wasn't specified then maybe the remote specified to download this as an attachment?\n                    // if it's invalid then we can still possibly test for the attachment/inline type\n                    const type = /^\\s*?attachment/i.test(header)\n                        ? 'attachment'\n                        : 'inline';\n\n                    // set the filename\n                    const [filename] = new URL(response.finalURL).pathname\n                        .split('/')\n                        .slice(-1);\n\n                    responseCtx.headers[\n                        'content-disposition'\n                    ] = `${type}; filename=${JSON.stringify(filename)}`;\n                }\n            }\n\n            if (responseCtx.headers['set-cookie']) {\n                Promise.resolve(\n                    ultraviolet.cookie.setCookies(\n                        responseCtx.headers['set-cookie'],\n                        db,\n                        ultraviolet.meta\n                    )\n                ).then(() => {\n                    self.clients.matchAll().then(function (clients) {\n                        clients.forEach(function (client) {\n                            client.postMessage({\n                                msg: 'updateCookies',\n                                url: ultraviolet.meta.url.href,\n                            });\n                        });\n                    });\n                });\n                delete responseCtx.headers['set-cookie'];\n            }\n\n            if (responseCtx.body) {\n                switch (request.destination) {\n                    case 'script':\n                    case 'worker':\n                        {\n                            // craft a JS-safe list of arguments\n                            const scripts = [\n                                ultraviolet.bundleScript,\n                                ultraviolet.clientScript,\n                                ultraviolet.configScript,\n                                ultraviolet.handlerScript,\n                            ]\n                                .map((script) => JSON.stringify(script))\n                                .join(',');\n                            responseCtx.body = `if (!self.__uv && self.importScripts) { ${ultraviolet.createJsInject(\n                                ultraviolet.cookie.serialize(\n                                    cookies,\n                                    ultraviolet.meta,\n                                    true\n                                ),\n                                request.referrer\n                            )} importScripts(${scripts}); }\\n`;\n                            responseCtx.body += ultraviolet.js.rewrite(\n                                await response.text()\n                            );\n                        }\n                        break;\n                    case 'style':\n                        responseCtx.body = ultraviolet.rewriteCSS(\n                            await response.text()\n                        );\n                        break;\n                    case 'iframe':\n                    case 'document':\n                        if (\n                            isHtml(\n                                ultraviolet.meta.url,\n                                responseCtx.headers['content-type'] || ''\n                            )\n                        ) {\n                            let modifiedResponse = await response.text();\n\n                            if (typeof this.config.inject === 'function') {\n                                const ctx = createContext(modifiedResponse);\n\n                                await this.config.inject(ctx, new URL(fetchedURL));\n\n                                modifiedResponse = ctx.getModifiedHtml();\n                            }\n\n                            responseCtx.body = ultraviolet.rewriteHtml(\n                                modifiedResponse,\n                                {\n                                    document: true,\n                                    injectHead: ultraviolet.createHtmlInject(\n                                        ultraviolet.handlerScript,\n                                        ultraviolet.bundleScript,\n                                        ultraviolet.clientScript,\n                                        ultraviolet.configScript,\n                                        ultraviolet.cookie.serialize(\n                                            cookies,\n                                            ultraviolet.meta,\n                                            true\n                                        ),\n                                        request.referrer\n                                    ),\n                                }\n                            );\n                        }\n                }\n            }\n\n            if (requestCtx.headers.accept === 'text/event-stream') {\n                responseCtx.headers['content-type'] = 'text/event-stream';\n            }\n            if (crossOriginIsolated) {\n                responseCtx.headers['Cross-Origin-Embedder-Policy'] =\n                    'require-corp';\n            }\n\n            this.emit('response', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            return new Response(responseCtx.body, {\n                headers: responseCtx.headers,\n                status: responseCtx.status,\n                statusText: responseCtx.statusText,\n            });\n        } catch (err) {\n            if (!['document', 'iframe'].includes(request.destination))\n                return new Response(undefined, { status: 500 });\n\n            console.error(err);\n\n            return renderError(err, fetchedURL);\n        }\n    }\n    static Ultraviolet = Ultraviolet;\n}\n\nself.UVServiceWorker = UVServiceWorker;\n\nclass ResponseContext {\n    /**\n     *\n     * @param {RequestContext} request\n     * @param {import(\"@mercuryworkshop/bare-mux\").BareResponseFetch} response\n     */\n    constructor(request, response) {\n        this.request = request;\n        this.raw = response;\n        this.ultraviolet = request.ultraviolet;\n        this.headers = {};\n        // eg set-cookie\n        for (const key in response.rawHeaders)\n            this.headers[key.toLowerCase()] = response.rawHeaders[key];\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n    }\n    get url() {\n        return this.request.url;\n    }\n    get base() {\n        return this.request.base;\n    }\n    set base(val) {\n        this.request.base = val;\n    }\n}\n\nclass RequestContext {\n    /**\n     *\n     * @param {Request} request\n     * @param {Ultraviolet} ultraviolet\n     * @param {BodyInit} body\n     */\n    constructor(request, ultraviolet, body = null) {\n        this.ultraviolet = ultraviolet;\n        this.request = request;\n        this.headers = Object.fromEntries(request.headers.entries());\n        this.method = request.method;\n        this.body = body || null;\n        this.cache = request.cache;\n        this.redirect = request.redirect;\n        this.credentials = 'omit';\n        this.mode = request.mode === 'cors' ? request.mode : 'same-origin';\n        this.blob = false;\n    }\n    get url() {\n        return this.ultraviolet.meta.url;\n    }\n    set url(val) {\n        this.ultraviolet.meta.url = val;\n    }\n    get base() {\n        return this.ultraviolet.meta.base;\n    }\n    set base(val) {\n        this.ultraviolet.meta.base = val;\n    }\n}\n\nfunction isHtml(url, contentType = '') {\n    return (\n        (\n            Ultraviolet.mime.contentType(contentType || url.pathname) ||\n            'text/html'\n        ).split(';')[0] === 'text/html'\n    );\n}\n\nclass HookEvent {\n    #intercepted;\n    #returnValue;\n    constructor(data = {}, target = null, that = null) {\n        this.#intercepted = false;\n        this.#returnValue = null;\n        this.data = data;\n        this.target = target;\n        this.that = that;\n    }\n    get intercepted() {\n        return this.#intercepted;\n    }\n    get returnValue() {\n        return this.#returnValue;\n    }\n    respondWith(input) {\n        this.#returnValue = input;\n        this.#intercepted = true;\n    }\n}\n\n/**\n *\n * @param {string} trace\n * @param {string} fetchedURL\n * @returns\n */\nfunction errorTemplate(\n    trace,\n    fetchedURL,\n) {\n    // turn script into a data URI so we don't have to escape any HTML values\n    const script = `\n        errorTrace.value = ${JSON.stringify(trace)};\n        fetchedURL.textContent = ${JSON.stringify(fetchedURL)};\n        for (const node of document.querySelectorAll(\"#uvHostname\")) node.textContent = ${JSON.stringify(\n        location.hostname\n    )};\n        reload.addEventListener(\"click\", () => location.reload());\n        uvVersion.textContent = ${JSON.stringify(\n        process.env.ULTRAVIOLET_VERSION\n    )};\n    `\n\n    return (\n        `<!DOCTYPE html>\n        <html>\n        <head>\n        <meta charset='utf-8' />\n        <title>Error</title>\n        <style>\n        * { background-color: white }\n        </style>\n        </head>\n        <body>\n        <h1 id='errorTitle'>Error processing your request</h1>\n        <hr />\n        <p>Failed to load <b id=\"fetchedURL\"></b></p>\n        <p id=\"errorMessage\">Internal Server Error</p>\n        <textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>\n        <p>Try:</p>\n        <ul>\n        <li>Checking your internet connection</li>\n        <li>Verifying you entered the correct address</li>\n        <li>Clearing the site data</li>\n        <li>Contacting <b id=\"uvHostname\"></b>'s administrator</li>\n        <li>Verify the server isn't censored</li>\n        </ul>\n        <p>If you're the administrator of <b id=\"uvHostname\"></b>, try:</p>\n        <ul>\n        <li>Restarting your server</li>\n        <li>Updating Ultraviolet</li>\n        <li>Troubleshooting the error on the <a href=\"https://github.com/titaniumnetwork-dev/Ultraviolet\" target=\"_blank\">GitHub repository</a></li>\n        </ul>\n        <button id=\"reload\">Reload</button>\n        <hr />\n        <p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>\n        <script src=\"${'data:application/javascript,' + encodeURIComponent(script)\n        }\"></script>\n        </body>\n        </html>\n        `\n    );\n}\n\n/**\n *\n * @param {unknown} err\n * @param {string} fetchedURL\n */\nfunction renderError(err, fetchedURL) {\n    let headers = {\n        'content-type': 'text/html',\n    };\n    if (crossOriginIsolated) {\n        headers['Cross-Origin-Embedder-Policy'] = 'require-corp';\n    }\n\n    return new Response(\n        errorTemplate(\n            String(err),\n            fetchedURL\n        ),\n        {\n            status: 500,\n            headers: headers\n        }\n    );\n}\n"],
  "mappings": "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",
  "names": ["Ultraviolet", "createContext", "html", "modifiedHTML", "injectAtPosition", "content", "position", "headCloseIndex", "styleTag", "scriptTag", "bodyCloseIndex", "cspHeaders", "emptyMethods", "UVServiceWorker", "config", "request", "fetchedURL", "ultraviolet", "db", "requestCtx", "RequestContext", "referer", "cookies", "cookieStr", "reqEvent", "HookEvent", "middlewareReq", "middleware", "response", "responseCtx", "ResponseContext", "resEvent", "name", "header", "type", "filename", "clients", "client", "scripts", "script", "isHtml", "modifiedResponse", "ctx", "err", "renderError", "key", "val", "body", "url", "contentType", "#intercepted", "#returnValue", "data", "target", "that", "input", "errorTemplate", "trace", "headers"]
}
