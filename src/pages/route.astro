---
import Base from '../layouts/base.astro'
import * as Icons from 'lucide-solid'
---

<Base>
  <div class="h-screen w-screen z-40 absolute top-0 left-0">
    <iframe id="frame" class="h-full w-full"></iframe>
  </div>

  <div class="absolute left-1/2 bottom-4 -translate-x-1/2 join rounded-btn bg-base-200 z-50" transition:name="control">
    <button class="btn btn-square join-item" id="back">
      <Icons.ChevronLeft class="h-5 w-5" strokeWidth={2.5} />
    </button>

    <button class="btn btn-square join-item" id="reload">
      <Icons.RotateCw class="h-5 w-5" strokeWidth={2.5} />
    </button>

    <input transition:persist="input" type="text" id="input" class="input bg-base-200 focus:border-none focus:outline-none w-96 join-item" />

    <button class="btn btn-square join-item" id="open">
      <Icons.ArrowUpRightFromSquare class="h-5 w-5" strokeWidth={2.5} />
    </button>

    <button class="btn btn-square join-item" id="bookmark">
      <Icons.Bookmark class="h-5 w-5" id="fav-icn" fill="none" strokeWidth={2.5} id="bm-icon" />
    </button>

    <a href="/">
      <button class="btn btn-square join-item">
        <Icons.Home class="h-5 w-5" strokeWidth={2.5} />
      </button>
    </a>
  </div>

  <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex items-center gap-3 z-10" id="loader">
    <h1 class="text-4xl font-semibold">Loading</h1>
    <span class="loading loading-dots w-14"></span>
  </div>
</Base>

<script>
  // Initial iframe loading
  import { navigate } from 'astro:transitions/client'
  import { clearRegistrations, registerSW } from '../lib/sw.ts'
  import store from 'store2'
  // @ts-ignore
  import { encodeXor, formatQuery } from '../lib/formatQuery'

  document.addEventListener('astro:page-load', async () => {
    if (!window.location.pathname.includes('/route')) return

    const frame: any = document.getElementById('frame')
    const input = document.querySelector('input')
    const urlParams = new URLSearchParams(window.location.search)
    let prox: string
    if (store.get('proxy') === 'Scramjet') {
      prox = '/libs'
    } else {
      prox = '/cdn-cgi'
    }
    if (urlParams.get('q')) input.value = decodeURIComponent(atob(urlParams.get('q')))
    urlParams.delete('q')
    window.history.replaceState(null, '', '/route')

    if (!input.value) input.value = 'https://google.com'

    const preurl = formatQuery(input.value)
    const url = `${prox}/${encodeXor(preurl)}`
    console.log(input.value)
    input.blur()

    if ('serviceWorker' in navigator) {
      await clearRegistrations()
      await registerSW()

      frame.src = url
    }
  })
</script>

<script>
  interface ContentWindow extends Window {
    __uv$location: Location
  }

  // Control handling
  import { encodeXor, formatQuery } from '../lib/formatQuery'
  import store from 'store2'

  document.addEventListener('astro:page-load', async () => {
    if (!window.location.pathname.includes('/route')) return

    const frame = document.querySelector('iframe')
    const contentWindow = frame.contentWindow as ContentWindow
    const back: HTMLButtonElement = document.querySelector('#back')
    const reload: HTMLButtonElement = document.querySelector('#reload')
    const open: HTMLButtonElement = document.querySelector('#open')
    const bookmark: HTMLButtonElement = document.querySelector('#bookmark')
    const bmIcon: HTMLButtonElement = document.querySelector('#bm-icon')
    const input: HTMLInputElement = document.querySelector('input')
    const loader: HTMLDivElement = document.querySelector('#loader')
    let prox: string
    if (store.get('proxy') === 'Scramjet') {
      prox = '/libs'
    } else {
      prox = '/cdn-cgi'
    }
    let isFav = false

    frame.onload = () => {
      if (!('__uv$location' in contentWindow)) return

      const currentUrl = contentWindow.__uv$location.href
      input.value = currentUrl
      isFav = false
      loader.style.display = 'none'

      store.set('bookmarks', [], false)
      const shortcuts: any[] = store('bookmarks')
      if (shortcuts.some((value) => value.url == contentWindow.__uv$location.href)) {
        bmIcon.classList.remove('fill-none')
        bmIcon.classList.add('fill-current')
      } else {
        bmIcon.classList.remove('fill-current')
        bmIcon.classList.add('fill-none')
      }
    }

    input.onkeydown = (e) => {
      if (e.key !== 'Enter') return

      const query = input.value
      frame.src = `${prox}/${encodeXor(formatQuery(query))}`
    }

    back.onclick = () => contentWindow.history.back()
    reload.onclick = () => contentWindow.location.reload()

    bookmark.onclick = () => {
      store.set('bookmarks', [], false)

      const bookmarks: any[] = store('bookmarks')

      if (bookmarks.some((value) => value.url == contentWindow.__uv$location.href)) {
        store(
          'bookmarks',
          bookmarks.filter((value) => value.url !== contentWindow.__uv$location.href)
        )
        bmIcon.classList.remove('fill-current')
        bmIcon.classList.add('fill-none')
      } else {
        store('bookmarks', [
          ...store('bookmarks'),
          {
            image: (contentWindow.document.querySelector("link[rel*='icon']") as HTMLLinkElement)?.href || `${contentWindow.__uv$location.origin}/favicon.ico`,
            title: contentWindow.document.title,
            url: contentWindow.__uv$location.href
          }
        ])
        bmIcon.classList.remove('fill-none')
        bmIcon.classList.add('fill-current')
      }
    }

    open.onclick = () => {
      console.log('hi')
      const tab = window.open('about:blank', '_blank')
      if (!tab) return
      const iframe = tab.document.createElement('iframe')
      const stl = iframe.style
      stl.border = stl.outline = 'none'
      stl.width = '100vw'
      stl.height = '100vh'
      stl.position = 'fixed'
      stl.left = stl.right = stl.top = stl.bottom = '0'
      iframe.src = frame.src
      tab.document.body.appendChild(iframe)
    }
  })
</script>
